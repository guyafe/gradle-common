buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    //Check for the latest patch here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
  }
}

allprojects {
  apply plugin: org.jfrog.gradle.plugin.artifactory.ArtifactoryPlugin
}


artifactory {
  contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
  publish {
    defaults {
      publications("mavenJava")
    }
    repository {
      repoKey = 'site-building-gradle-dev-local'
      username = "${artifactory_user}"
      password = "${artifactory_password}"
      maven = true
    }
  }
  resolve {
    repository {
      repoKey = 'site-building-gradle-dev'
      username = "${artifactory_user}"
      password = "${artifactory_password}"
      maven = true

    }
  }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'

repositories {
  mavenCentral()
}

java {
  withSourcesJar()
  withJavadocJar()
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifactId = rootProject.name
    }
  }
}

def getPatchValue = {
  String mjMnFileName = "./patch";
  String majorMinor = new File(mjMnFileName).text.trim();
  return majorMinor;
}

def getCurrentBranch  = {
  String gitBranch = 'git branch --show-current'.execute().text.trim();
  return gitBranch;
}

ext.resolveVersion = majorMinor -> {
  println("Current major and minor is " + majorMinor);
  String patch = getPatchValue();
  println("Current patch is: " + patch);
  String branch = getCurrentBranch();
  println("Current branch is: " + branch);
  String suffix = branch == "main" ? patch : branch + "-SNAPSHOT";
  String fullVersion = majorMinor + "." + suffix;
  println("Resolving version to: " + fullVersion);
  return fullVersion;
}

def incrementPatchIfNeeded = {
  String branch = getCurrentBranch();
  if(branch == "main"){
    int patch = Integer.parseInt(getPatchValue());
    patch++;
    File patchFile = new File("patch");
    patchFile.write(patch);
  }
}

tasks.register('publishToArtifactoryAndIncrementPatch'){
  dependsOn assemble;
  dependsOn artifactoryPublish;
  incrementPatchIfNeeded();
}
